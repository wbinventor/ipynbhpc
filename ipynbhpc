#!/usr/bin/env python
from subprocess import Popen, PIPE, call
import sys
import time
import os
import exceptions

# Total compute time to reserve node (in minutes)
# FIXME - make this query the user for the time
minutes = 30

# Build a unique port number from the user id
userid = os.geteuid()
port = 8000 + user_id

# Torque template reserves
qsub_template = 'qsub -I -V -l nodes=1:ppn=1:walltime=%d:00 -q normal'.format(time)
notebook_template = 'ipython notebook --pylab=inline --port=%d --no-browser'.format(port)

def readwhile(stream,func):
    while True:
        line = stream.readline()
        if line!='':
            print line[:-1]
            if func(line): break
        else:
            raise exceptions.Exception("Disconnected unexpectedly.") 
 
print("Requesting an interactive node")
pqsub=Popen(['ssh','-t','-t','-4','localhost'],stdin=PIPE,stdout=PIPE,stderr=PIPE)
pqsub.stdin.write((qsub_template % minutes)+"\n")
pqsub.stdin.write('echo HOSTNAME=`hostname`\n')
 
def gethostname(line):
    global hostname
    if line.startswith('HOSTNAME'):
        hostname = line.split('=')[1].strip()
        return True
 
print("Waiting for the job to start...")
readwhile(pqsub.stdout, gethostname)
 
pqsub.stdin.write('cd $PBS_O_WORKDIR\n')
pqsub.stdin.write('echo CD\n')
readwhile(pqsub.stdout, lambda line: line.startswith('CD'))
    
print("Launching the notebook")
pqsub.stdin.write((notebook_template % port)+"\n")
readwhile(pqsub.stdout, lambda line: line.find('NotebookApp')>0)
 
print("Setting up SSH tunnel from computing to login node")
tunnel = ['ssh', '-t', '-Y', hostname, '-L', '%s:localhost:%s'% (port,port)]
ptunnel = Popen(tunnel,stdout=PIPE,stdin=PIPE)
ptunnel.stdin.write('echo TUNNEL\n')
readwhile(ptunnel.stdout,lambda line: line.startswith('TUNNEL'))
 
print("Succesfully opened notebook!")
print("Kill this process to end your notebook connection.")
time.sleep(minutes*60)
 
pqsub.kill()
ptunnel.kill()
 
print("Succesfully cleaned up connections.")
